class dIVElement extends hTMElement {
    constructor(parameters: { id: string; title: string; textContent: any; text: string; css: string[]; contentEditable: string; dir: string; hidden: boolean; innerText: string; lang: string; onabort: (this: GlobalEventHandlers, ev: UIEvent) => any; onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any; onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any; onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any; onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any; onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any; oncancel: (this: GlobalEventHandlers, ev: Event) => any; oncanplay: (this: GlobalEventHandlers, ev: Event) => any; oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any; onchange: (this: GlobalEventHandlers, ev: Event) => any; onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any; onclose: (this: GlobalEventHandlers, ev: Event) => any; oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any; oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any; oncuechange: (this: GlobalEventHandlers, ev: Event) => any; oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any; ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any; ondurationchange: (this: GlobalEventHandlers, ev: Event) => any; onended: (this: GlobalEventHandlers, ev: Event) => any; onerror: OnErrorEventHandlerNonNull; onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any; ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any; oninput: (this: GlobalEventHandlers, ev: Event) => any; oninvalid: (this: GlobalEventHandlers, ev: Event) => any; onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any; onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any; onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any; onload: (this: GlobalEventHandlers, ev: Event) => any; onloadeddata: (this: GlobalEventHandlers, ev: Event) => any; onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any; onloadstart: (this: GlobalEventHandlers, ev: Event) => any; onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any; onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any; onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any; onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any; onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any; onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any; onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any; onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any; onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any; onpause: (this: GlobalEventHandlers, ev: Event) => any; onplay: (this: GlobalEventHandlers, ev: Event) => any; onplaying: (this: GlobalEventHandlers, ev: Event) => any; onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any; onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any; onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any; onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any; onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any; onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any; onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any; onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any; onreset: (this: GlobalEventHandlers, ev: Event) => any; onresize: (this: GlobalEventHandlers, ev: UIEvent) => any; onscroll: (this: GlobalEventHandlers, ev: Event) => any; onselect: (this: GlobalEventHandlers, ev: Event) => any; onselectionchange: (this: GlobalEventHandlers, ev: Event) => any; onselectstart: (this: GlobalEventHandlers, ev: Event) => any; onsubmit: (this: GlobalEventHandlers, ev: Event) => any; ontouchcancel: (this: GlobalEventHandlers, ev: TouchEvent) => any; ontouchstart: (this: GlobalEventHandlers, ev: TouchEvent) => any; ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any; ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any; onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any }) {

        let div = document.createElement('div')

        super(parameters)

        return div
    }
}